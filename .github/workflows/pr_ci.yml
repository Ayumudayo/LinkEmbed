name: Pull Request CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "main", "master" ]
  # Manual trigger
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  build-and-test:
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/.vcpkg_cache,readwrite
      VCPKG_FEATURE_FLAGS: manifests,binarycaching
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract vcpkg builtin baseline
      id: vcpkg-baseline
      shell: bash
      run: |
        set -euo pipefail
        # Extract 40-hex builtin-baseline from vcpkg.json
        baseline=$(grep -oE '"builtin-baseline"\s*:\s*"[0-9a-f]{40}"' vcpkg.json | sed -E 's/.*"([0-9a-f]{40})".*/\1/')
        if [ -z "${baseline}" ]; then
          echo "Failed to extract builtin-baseline from vcpkg.json" >&2
          exit 1
        fi
        echo "vcpkg builtin-baseline: ${baseline}"
        echo "baseline=${baseline}" >> "$GITHUB_OUTPUT"

    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install Ninja (Windows)
      if: runner.os == 'Windows'
      run: choco install ninja --no-progress -y
      shell: powershell

    - name: Setup vcpkg
      uses: actions/checkout@v4
      with:
        repository: microsoft/vcpkg
        path: vcpkg
        # Pin vcpkg to the project's builtin-baseline for reproducibility and cache hits
        ref: ${{ steps.vcpkg-baseline.outputs.baseline }}
        fetch-depth: 0

    - name: Bootstrap vcpkg
      run: ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
      shell: bash
      if: runner.os == 'Linux'

    - name: Install build tools (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build pkg-config build-essential
      shell: bash

    - name: Bootstrap vcpkg (Windows)
      run: .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
      shell: cmd
      if: runner.os == 'Windows'

    - name: Cache vcpkg binaries (files backend)
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/.vcpkg_cache
        # Keyed by OS and vcpkg manifest baseline (vcpkg.json). Avoid tying to vcpkg repo HEAD to improve hit rate.
        key: ${{ runner.os }}-vcpkg-files-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-files-

    - name: Cache vcpkg downloads
      uses: actions/cache@v4
      with:
        path: ${{ env.VCPKG_ROOT }}/downloads
        key: ${{ runner.os }}-vcpkg-downloads-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-downloads-

    - name: Configure, Build, and Test (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        cmake --preset linux-x64-release
        cmake --build --preset linux-x64-release
        ctest --preset linux-x64-release

    - name: Configure (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -euo pipefail
        cmake --preset windows-x64-release

    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        set -euo pipefail
        cmake --build --preset windows-x64-release --parallel

    - name: Test (Windows)
      if: runner.os == 'Windows'
      shell: bash
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: |
        set -euo pipefail
        ctest --preset windows-x64-release --output-on-failure -V
